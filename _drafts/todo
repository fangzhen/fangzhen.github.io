arp https://easystack.atlassian.net/browse/EAS-8248
memory leak: https://easystack.atlassian.net/browse/EAS-12312
EAS-45694 - memory + signal

验证网关，需要先清arp
zombie process: EAS-15236
process/celery: https://easystack.atlassian.net/browse/EAS-27001

How does process scheduler run? System timer
User preemption, kernel preemption

Singal handling: interrupt?
default handler: How is it defined/linked? The C library assigns default signal handlers.
http://www.alexonlinux.com/signal-handling-in-linux
http://www.zyxtech.org/2017/08/08/%E5%BD%93%E6%89%A7%E8%A1%8Ckill-9-pid%E6%97%B6%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/
https://stackoverflow.com/questions/6949025/how-are-asynchronous-signal-handlers-executed-on-linux
https://unix.stackexchange.com/questions/241115/signal-execution-details
https://devarea.com/linux-handling-signals-in-a-multithreaded-application/

cgroup/pam/stap EAS-37544

module load 过程 怎么load到kernel space的

memory buffer/cache
https://linux.cn/article-7310-1.html
https://zhuanlan.zhihu.com/p/32354613
http://linuxperf.com/?p=142
http://linuxperf.com/?p=32
https://mp.weixin.qq.com/s/QbcnLU_BHrzkb97XQE405Q
https://realpython.com/python-memory-management/
http://linuxperf.com/?p=97

kmalloc/vmalloc/slab 等只是处理kernel内存吗
user space 内存 比如stack vma谁创建的？

distributed system:
整体
https://cloud.tencent.com/developer/article/1422177
https://www.zhihu.com/question/23645117

consensus: paxos raft
consistency
http://blog.kongfy.com/2016/08/%E8%A2%AB%E8%AF%AF%E7%94%A8%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/
https://www.jiqizhixin.com/articles/2020-02-20-3
http://blog.kongfy.com/2016/05/%e5%88%86%e5%b8%83%e5%bc%8f%e5%85%b1%e8%af%86consensus%ef%bc%9aviewstamped%e3%80%81raft%e5%8f%8apaxos/

lock, concurrency

cap
https://stackoverflow.com/questions/12346326/cap-theorem-availability-and-partition-tolerance
https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/ - 值得看
https://codahale.com/you-cant-sacrifice-partition-tolerance/
http://ksat.me/a-plain-english-introduction-to-cap-theorem

coroutine:
python/rust async/await
eventloop + yield/send/channel
refs: mio tokio
goroutine is beyond coroutine

shadowsocks
https://shadowsocks.org/en/spec/AEAD-Ciphers.html
http://www.chinagfw.org/2017/02/shadowsocks-ota.html
https://www.bfdz.ink/2019/12/30/139/
https://loggerhead.me/posts/shadowsocks-yuan-ma-fen-xi-xie-yi-yu-jie-gou.html
透明代理 tproxy
https://www.jianshu.com/p/76cea3ef249d
https://github.com/darkk/redsocks/
https://www.kernel.org/doc/Documentation/networking/tproxy.txt
加密
https://printempw.github.io/why-do-shadowsocks-deprecate-ota/
https://en.wikipedia.org/wiki/Authenticated_encryption
https://blog.csdn.net/T0mato_/article/details/53160772
https://evilpan.com/2019/06/02/crypto-attacks/

bbr
https://www.zhihu.com/question/53559433
http://www.taohui.pub/2019/08/07/%E4%B8%80%E6%96%87%E8%A7%A3%E9%87%8A%E6%B8%85%E6%A5%9Agoogle-bbr%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/

https
http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html

http2
https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn

https://blog.gingerlime.com/2011/django-memory-leaks-part-i/

cpu load iowait etc.
https://eklitzke.org/uninterruptible-sleep
http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html
https://blog.pregos.info/wp-content/uploads/2010/09/iowait.txt
http://notemagnet.blogspot.com/2008/08/linux-write-cache-mystery.html
https://stackoverflow.com/questions/52067753/how-to-keep-executable-code-in-memory-even-under-memory-pressure-in-linux
https://askubuntu.com/questions/432809/why-is-kswapd0-running-on-a-computer-with-no-swap/432827#432827
https://zhuanlan.zhihu.com/p/95813254



EAS-57616


pxe启动过程 initrd 启动过程内存layout等
https://landley.net/writing/rootfs-intro.html
https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt
https://wiki.osdev.org/Detecting_Memory_(x86)
http://deltamaster.is-programmer.com/posts/37297.html
https://web.archive.org/web/20110524083740/http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf
https://wiki.gentoo.org/wiki/Initramfs/Guide/zh-cn
https://wiki.syslinux.org/wiki/index.php?title=Memory_Map_(General)
https://www.kernel.org/doc/html/latest/x86/boot.html
https://wdv4758h.github.io/notes/blog/linux-kernel-boot.html
https://zhuanlan.zhihu.com/p/73077391
https://www.freedesktop.org/software/systemd/man/bootup.html
https://xixiliguo.github.io/post/linux-boot/


EAS-52023 arp
https://zhuanlan.zhihu.com/p/53374516 tcp 三次握手
https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/
https://blog.csdn.net/minghe_uestc/article/details/7794852 邻居子系统
https://blog.csdn.net/xiaoyu_750516366/article/details/104590052 邻居子系统
http://www.haifux.org/lectures/180/netLec2.pdf linux 网络

memory barrier 编译器乱序 CPU乱序
https://www.kernel.org/doc/Documentation/memory-barriers.txt
https://blog.csdn.net/zhangxiao93/article/details/42966279
SMP cache？有缓存一致性，为什么还需要barrier？
barrier是不是只有race的情况下才需要？ 不一定：例如 device operations；常规访问内存只有race的情况下才需要？
  Memory barriers are only required where there's a possibility of interaction
  between two CPUs or between a CPU and a device.  If it can be guaranteed that
  there won't be any such interaction in any particular piece of code, then
  memory barriers are unnecessary in that piece of code.

volatile
https://stackoverflow.com/questions/246127/why-is-volatile-needed-in-c

smp cache 一致性
https://zhuanlan.zhihu.com/p/363144950
https://blog.csdn.net/happyAnger6/article/details/93398545

golang race
https://blog.csdn.net/BEYONDMA/article/details/118048511 - 该文章解释都是错的
https://ms2008.github.io/2019/05/22/golang-data-race-cont/

一个CPU指令占用几个时钟周期是固定的吗？访存时CPU在干什么 跟流水线技术 分支预测什么关系？
https://stackoverflow.com/questions/692718/how-many-cpu-cycles-are-needed-for-each-assembly-instruction
https://stackoverflow.com/questions/45113527/why-does-mulss-take-only-3-cycles-on-haswell-different-from-agners-instruction/45114487#45114487
https://superuser.com/questions/643442/latency-of-cpu-instructions-on-x86-and-x64-processors


GPU
https://stackoverflow.com/questions/1697842/do-graphic-cards-have-instruction-sets-of-their-own
https://www.quora.com/What-are-graphic-cards-drivers-for
https://computer.howstuffworks.com/graphics-card.htm
https://www.howtogeek.com/122274/how-do-the-cpu-and-gpu-interact-to-render-computer-graphics/
https://www.bestcpus.com/how-do-the-cpu-and-gpu-work-together/
https://www.quora.com/How-do-CPU-and-GPU-work-together-What-if-one-of-them-is-faster-than-the-other



memory - segment, page table
x86 CPU mode
 写的比较清楚详细：https://blog.csdn.net/liuyez123/article/details/51096914
 protected mode:
 long mode:

        段         页表
 逻辑地址 -> 线性地址 -> 物理地址

 GDTR存放 GDT的线性地址

 页表：CR3 -> 物理地址

                GDTR -> GDT  -> segment descriptor -> base -> liner address
 logic.CS -> segment selector -> |            logic.offset -> |

物理地址中存放 多级页表， 页表管理的所有page（包括GDT,等）。如果先开启分段再分页，应该保证开启分页前后GDTR中的地址对应到同样的物理地址上。

page table是per-process的。
GDT的线性地址对所有进程的页表，需要映射到相同的物理地址。

CR3 - 页表
GDTR - GDT

分配一块物理内存存储所有物理页信息 pages
page table 映射上述物理地址到线性地址
更新 pages的地址为线性地址
映射GDT
更新GDTR CR3

linux memory layout
https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt

linux中 对TSS的使用 https://blog.csdn.net/rikeyone/article/details/110507911
http://liujunming.top/2020/01/18/%E6%B5%85%E8%B0%88tss/
ldt etc https://stackoverflow.com/questions/38600901/ldt-and-paging-in-linux-for-x86-processors


linux 页表建立
https://blog.csdn.net/whenloce/article/details/88831089
https://blog.csdn.net/faxiang1230/article/details/106205110
https://blog.csdn.net/bullbat/article/details/7175125 - 页表初始化过程
https://chyyuu.gitbooks.io/ucore_os_docs/content/lab0/lab0_2_3_1_2_att_asm.html - AT&T 语法

efistub
https://cloud.tencent.com/developer/article/1645885
https://www.htmlds.com/key/linux%E5%86%85%E6%A0%B8%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0.html
https://www.kernel.org/doc/Documentation/efi-stub.txt

先console还是先内存初始化？


jekyll:
使用tag
https://www.untangled.dev/2020/06/02/tag-management-jekyll/
https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/

